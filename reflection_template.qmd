---
title: "STAT 331 Portfolio"
author: "Phillip Prak"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv
# lab 3 Q2
Teacher = read_csv(here::here("data", "teacher_evals.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# PA4 
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 191)

```

-   `txt`

```{r}
#| label: wd-1-txt
#PA 5
message_data <- read_csv("https://github.com/earobinson95/stat331-calpoly/raw/master/practice-activities/data/scrambled_message.txt")
```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2
#lab 4 Q6 modified based on comments will sumbit to revisons soon
ca_childcare |>
  select(mc_infant,
         mc_toddler, 
         mc_preschool,
         region, 
         study_year) |>
 pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age_group",   
               values_to = "cost")  |>
  mutate(age_group = fct_recode(.f = age_group,
                            "Infant" = "mc_infant",
                            "Toddler" = "mc_toddler",
                            "Preschool" = "mc_preschool"),
  age_group = fct_relevel(age_group, 
                          "Infant", 
                          "Toddler", 
                          "Preschool"), 
  region = fct_relevel(region, "San Francisco Bay Area", "Orange County", "Los Angeles County",
                              "Northern San Joaquin Valley", "Central Coast", "Inland Empire",
                              "Superior California", "Southern San Joaquin Valley", "San Diego-Imperial",
                              "North Coast"))|>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost,
                       color = region))+ 
  geom_point()+ 
  facet_wrap(~age_group) + 
  geom_smooth(method = "loess") +
 scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     limits = c(2008, 2018)) +
  
scale_y_continuous(breaks = seq(100, 500, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year", y = "", subtitle = "Weekly Median Price for Center-Based Childcare ($)", color = "California Region" ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) + 
  theme(
    text = element_text(size = 12),
    aspect.ratio = 1,
    legend.position = "right",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 15)
  ) + 
  theme_bw()
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric
# lab 3 Q8
teacher_evals_clean |>
  group_by(academic_degree, sex) |>
  summarise(
    avg_seniority = mean(seniority),
    min_seniority = min(seniority),
    max_seniority = max(seniority),
    total_instructors = n_distinct(teacher_id)
  )
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
#lab 5
person1 <- person |>
  filter((address_street_name == "Northwestern Dr" & 
          address_number == max(address_number)) | 
         (address_street_name == "Franklin Ave" & 
          str_detect(name, "Annabel"))) |> 
  inner_join(interview, 
            join_by(id == person_id))|>
  select(name, 
         id,
         transcript
         )
```

-   factor

```{r}
#| label: wd-3-factor
#lab 4 q3 
ca_childcare <- ca_childcare |>
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
                               "North Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
                               "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               "Southern San Joaquin Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               "Los Angeles County" = "Los Angeles",
                               "Orange County" = "Orange",
                               "San Diego - Imperial" = c("Imperial", "San Diego")
  ))


# View the dataframe with the new 'region' column
print(ca_childcare)

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
#lab 5 inspecting-crime-scene-report
crime_scene_report2 <- crime_scene_report |>
  select(date, type, city, description)|>
  mutate(date = ymd(date))|>
  filter(city == "SQL City",
         type == "murder",
         date == "2018-01-15") 
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
ca_childcare <- ca_childcare |>
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
                               "North Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
                               "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               "Southern San Joaquin Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               "Los Angeles County" = "Los Angeles",
                               "Orange County" = "Orange",
                               "San Diego - Imperial" = c("Imperial", "San Diego")
  ))

```

-   factor (example must use functions from **forcats**)
```{r}
#| label: wd-4-factor
#lab 4 q3
ca_childcare <- ca_childcare |>
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
                               "North Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
                               "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               "Southern San Joaquin Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               "Los Angeles County" = "Los Angeles",
                               "Orange County" = "Orange",
                               "San Diego - Imperial" = c("Imperial", "San Diego")
  ))


# View the dataframe with the new 'region' column
print(ca_childcare)
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
#lab 5 
crime_scene_report2 <- crime_scene_report |>
  select(date, type, city, description)|>
  mutate(date = ymd(date))|>
  filter(city == "SQL City",
         type == "murder",
         date == "2018-01-15") 
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left
#lab 4 
ca_childcare <- childcare_costs|>
  left_join(counties,
            by = join_by(county_fips_code == county_fips_code)) |>
  filter(state_name == "California")

```

-   `right_join()`

```{r}
#| label: wd-5-right
# lab 5 modified based on provided suggestions
person2 <- get_fit_now_check_in %>%
  mutate(check_in_date = ymd(check_in_date)) %>%
  filter(check_in_date == "2018-01-9") %>%
  right_join(get_fit_now_member, 
             join_by(membership_id == id)) |>
  filter(str_detect(membership_id, "^48Z"),
         membership_status == "gold") |>
  left_join(person,
            join_by(person_id == id)) |>
  left_join(drivers_license,
            join_by(license_id == id)) |>
  filter(gender == "male",
  str_detect(plate_number, "H42W"))
```

-   `inner_join()`

```{r}
#| label: wd-5-inner
# lab 5 modified based on provided suggestions
person1 <- person |>
  filter((address_street_name == "Northwestern Dr" & 
          address_number == max(address_number)) | 
         (address_street_name == "Franklin Ave" & 
          str_detect(name, "Annabel"))) |> 
  inner_join(interview, 
            join_by(id == person_id))|>
  select(name, 
         id,
         transcript
         )
```

-   `full_join()`

```{r}
#| label: wd-5-full
# lab 5
final1 <- person |>
  full_join(interview,
            join_by(id == person_id)) |>
filter(id == 99716) |>
  select(name, transcript)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
#will use use in the final
```

-   `anti_join()`

```{r}
#| label: wd-6-anti
#will use use in the final
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# lab 4 Q6 modified based on comments will sumbit to revisons soon
ca_childcare |>
  select(mc_infant,
         mc_toddler, 
         mc_preschool,
         region, 
         study_year) |>
 pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age_group",   
               values_to = "cost")  |>
  mutate(age_group = fct_recode(.f = age_group,
                            "Infant" = "mc_infant",
                            "Toddler" = "mc_toddler",
                            "Preschool" = "mc_preschool"),
  age_group = fct_relevel(age_group, 
                          "Infant", 
                          "Toddler", 
                          "Preschool"), 
  region = fct_relevel(region, "San Francisco Bay Area", "Orange County", "Los Angeles County",
                              "Northern San Joaquin Valley", "Central Coast", "Inland Empire",
                              "Superior California", "Southern San Joaquin Valley", "San Diego-Imperial",
                              "North Coast"))|>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost,
                       color = region))+ 
  geom_point()+ 
  facet_wrap(~age_group) + 
  geom_smooth(method = "loess") +
 scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     limits = c(2008, 2018)) +
  
scale_y_continuous(breaks = seq(100, 500, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year", y = "", subtitle = "Weekly Median Price for Center-Based Childcare ($)", color = "California Region" ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) + 
  theme(
    text = element_text(size = 12),
    aspect.ratio = 1,
    legend.position = "right",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 15)
  ) + 
  theme_bw()

#I have fixed the code based on the feedback given to me
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# lab 4 question 4  
# I have fixed the code based on the comments and realigned etc based on the feedback
ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_householdincome = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(id_cols = region, 
              names_from = study_year, 
              values_from = median_householdincome, 
              names_prefix = "Median Household Income ") |>
  arrange(desc(`Median Household Income 2018`))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
#Question 16 lab 2
ggplot(data = surveys, 
       mapping = aes(x = weight, y = species)) +
    geom_boxplot(  outliers = FALSE) +
  geom_jitter(alpha = 0.3, color = "steelblue") + 
  labs(x = "weight(grams)", y = "Rodent species", title = "Weight distribution in grams for the various Rodent species ") 
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
#Lab 3 Q5
teacher_evals_clean <- Teacher |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id))|>
  select(course_id, teacher_id, question_no, no_participants, resp_share, 
         SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)
```

-   Example of function formatting

```{r}
#| label: r-2-3
SLICE MIN SLICE MAX???
summarize?
  
  
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

```

-   Example of function stops

```{r}
#| label: r-3-function-stops
#Not in this midterm
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num
# lab 2 question 4
ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length )
       ) +
  geom_point()

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
# lab 2 Q15 make more tidy later on
ggplot(data = surveys, 
       mapping = aes(x = species, y = weight)) +
    geom_boxplot( outliers = FALSE) +
  geom_jitter(alpha = 0.3, color = "steelblue") + 
  labs(x = "Rodent species", y = "", subtitle = "weight(grams)", title = "Weight distribution in grams for the various Rodent species ") + 
  theme(axis.text.x = element_text(angle = 45))
```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat
# code chunk for Q13
library(ggplot2)


ggplot(data = teacher_evals_compare, 
       aes(x = Sen_level, fill = SET_level)) + 
  geom_bar(position = "stack") + 
  theme_bw() + 
  labs(x = "Seniority of Instructor", 
       y = "", 
       fill = "SET Level", 
       subtitle = "Number of Sections") + 
  scale_fill_manual(values = c("excellent" = "steelblue", 
                               "standard" = "orange3"))
```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date
# lab 4 Q6 modified based on comments will sumbit to revisons soon
ca_childcare |>
  select(mc_infant,
         mc_toddler, 
         mc_preschool,
         region, 
         study_year) |>
 pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age_group",   
               values_to = "cost")  |>
  mutate(age_group = fct_recode(.f = age_group,
                            "Infant" = "mc_infant",
                            "Toddler" = "mc_toddler",
                            "Preschool" = "mc_preschool"),
  age_group = fct_relevel(age_group, 
                          "Infant", 
                          "Toddler", 
                          "Preschool"), 
  region = fct_relevel(region, "San Francisco Bay Area", "Orange County", "Los Angeles County",
                              "Northern San Joaquin Valley", "Central Coast", "Inland Empire",
                              "Superior California", "Southern San Joaquin Valley", "San Diego-Imperial",
                              "North Coast"))|>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost,
                       color = region))+ 
  geom_point()+ 
  facet_wrap(~age_group) + 
  geom_smooth(method = "loess") +
 scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     limits = c(2008, 2018)) +
  
scale_y_continuous(breaks = seq(100, 500, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year", y = "", subtitle = "Weekly Median Price for Center-Based Childcare ($)", color = "California Region" ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) + 
  theme(
    text = element_text(size = 12),
    aspect.ratio = 1,
    legend.position = "right",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 15)
  ) + 
  theme_bw()
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1
#lab4 q7
reg_mod1 <- lm(mc_infant ~ mhi_2018, data = ca_childcare)

ggplot(ca_childcare, aes(x=mc_infant, y=mhi_2018)) + 
  geom_point() + 
  geom_jitter() +
  geom_smooth(method = 'lm') + 
  labs(x = "Median Full-Time Price for Center-Based Infant Care(Dollars)", 
       y = "",
       subtitle = "Median household income (Dollars)",
       title = "Household Income vs. Infant Care Cost in CA 2018") + 
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_dollar())

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2
#lab 2 question 15
ggplot(data = surveys, 
       mapping = aes(x = species, y = weight)) +
    geom_boxplot( outliers = FALSE) +
  geom_jitter(alpha = 0.3, color = "steelblue") + 
  labs(x = "Rodent species", y = "",subtitle = "weight(grams)", title = "Weight distribution in grams for the various Rodent species ") + 
  theme(axis.text.x = element_text(angle = 45))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3
# lab 4 Q6 modified based on comments will sumbit to revisons soon
ca_childcare |>
  select(mc_infant,
         mc_toddler, 
         mc_preschool,
         region, 
         study_year) |>
 pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age_group",   
               values_to = "cost")  |>
  mutate(age_group = fct_recode(.f = age_group,
                            "Infant" = "mc_infant",
                            "Toddler" = "mc_toddler",
                            "Preschool" = "mc_preschool"),
  age_group = fct_relevel(age_group, 
                          "Infant", 
                          "Toddler", 
                          "Preschool"), 
  region = fct_relevel(region, "San Francisco Bay Area", "Orange County", "Los Angeles County",
                              "Northern San Joaquin Valley", "Central Coast", "Inland Empire",
                              "Superior California", "Southern San Joaquin Valley", "San Diego-Imperial",
                              "North Coast"))|>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost,
                       color = region))+ 
  geom_point()+ 
  facet_wrap(~age_group) + 
  geom_smooth(method = "loess") +
 scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     limits = c(2008, 2018)) +
  
scale_y_continuous(breaks = seq(100, 500, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year", y = "", subtitle = "Weekly Median Price for Center-Based Childcare ($)", color = "California Region" ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) + 
  theme(
    text = element_text(size = 12),
    aspect.ratio = 1,
    legend.position = "right",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 15)
  ) + 
  theme_bw()
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1
# lab 4 Q6 modified based on comments will sumbit to revisons soon
ca_childcare |>
  select(mc_infant,
         mc_toddler, 
         mc_preschool,
         region, 
         study_year) |>
 pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age_group",   
               values_to = "cost")  |>
  mutate(age_group = fct_recode(.f = age_group,
                            "Infant" = "mc_infant",
                            "Toddler" = "mc_toddler",
                            "Preschool" = "mc_preschool"),
  age_group = fct_relevel(age_group, 
                          "Infant", 
                          "Toddler", 
                          "Preschool"), 
  region = fct_relevel(region, "San Francisco Bay Area", "Orange County", "Los Angeles County",
                              "Northern San Joaquin Valley", "Central Coast", "Inland Empire",
                              "Superior California", "Southern San Joaquin Valley", "San Diego-Imperial",
                              "North Coast"))|>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost,
                       color = region))+ 
  geom_point()+ 
  facet_wrap(~age_group) + 
  geom_smooth(method = "loess") +
 scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     limits = c(2008, 2018)) +
  
scale_y_continuous(breaks = seq(100, 500, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year", y = "", subtitle = "Weekly Median Price for Center-Based Childcare ($)", color = "California Region" ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) + 
  theme(
    text = element_text(size = 12),
    aspect.ratio = 1,
    legend.position = "right",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 15)
  ) + 
  theme_bw()
```

-   I can use annotations

```{r}
#| label: dvs-3-2
#challenge 2 HOT, Didn't attempt originally, but worked on it to fulfill the requirements for annotate
ggplot(data = surveys, 
       mapping = aes(y = species,
                     x = weight,
                     color = genus)) +
  geom_boxplot() +
  scale_color_manual(values = cdPalette_grey) + 
  annotate("text", y = 14, x = 250, label = "Onychomys") +
  annotate("text", y = 13, x = 250, label = "Dipodomys") + 
  annotate("text", y = 12, x = 250, label = "Chaetodipus") + 
  annotate("text", y = 11, x = 250, label = "Dipodomys") + 
  annotate("text", y = 10, x = 250, label = "Dipodomys") + 
  annotate("text", y = 9, x = 250, label = "Reithrodontomys") +
  annotate("text", y = 8, x = 250, label = "Peromyscus") +
  annotate("text", y = 7, x = 250, label = "Onychomys") +
  annotate("text", y = 6, x = 250, label = "Sigmodon") + 
  annotate("text", y = 5, x = 250, label = "Reithrodontomys") + 
  annotate("text", y = 4, x = 250, label = "Perognathus") + 
  annotate("text", y = 3, x = 250, label = "Peromyscus") + 
  annotate("text", y = 2, x = 250, label = "Chaetodipus") +
   annotate("text", y = 1, x = 250, label = "Neotoma") + 
  theme(legend.position = "none") +
  labs(title = "Rodent Weight by Species",
       x = "Weight (g)",
       y = "", 
       subtitle = "species")
```

-   I can be creative...

```{r}
#| label: dvs-3-3
# lab 4 q7
reg_mod1 <- lm(mc_infant ~ mhi_2018, data = ca_childcare)

ggplot(ca_childcare, aes(x=mc_infant, y=mhi_2018)) + 
  geom_point()+ 
  geom_jitter(alpha = 0.2, color = "darkslategray") +
  geom_smooth(method = 'lm', color = "red", linetype = "dashed") + 
  labs(x = "Median Full-Time Price for Center-Based Infant Care(Dollars)", 
       y = "",
       subtitle = "Median household income (Dollars)",
       title = "Household Income vs. Infant Care Cost in CA 2018") + 
  scale_x_continuous(labels = label_dollar()) +
  scale_y_continuous(labels = label_dollar())
  
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# code chunk for Lab 3 Q6
  teacher_evals_clean |>
  summarize(
    unique_instructors = n_distinct(teacher_id),
    unique_courses = n_distinct(course_id)
  )
```

-   Example using `across()`

```{r}
#| label: dvs-4-across
#will use in the final
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
# code chunk for Q8 lab 3
 
  teacher_evals_clean |>
  group_by(academic_degree, sex) |>
  summarise(
    avg_seniority = mean(seniority),
    min_seniority = min(seniority),
    max_seniority = max(seniority),
    total_instructors = n_distinct(teacher_id)
  )
```

-   Example 2

```{r}
#| label: dvs-5-2
# lab 4 q 4
ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_householdincome = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(id_cols = region, 
              names_from = study_year, 
              values_from = median_householdincome, 
              names_prefix = "Median Household Income ") |>
  arrange(desc(`Median Household Income 2018`))
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1
# lab 3 Q8
teacher_evals_clean |>
  group_by(academic_degree, sex) |>
  summarise(
    avg_seniority = mean(seniority),
    min_seniority = min(seniority),
    max_seniority = max(seniority),
    total_instructors = n_distinct(teacher_id)
  )



```

-   Example 2

```{r}
#| label: dvs-6-2
#lab 4 question 4 Modified based on comments will be in lab4 revisons 
ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_householdincome = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(id_cols = region, 
              names_from = study_year, 
              values_from = median_householdincome, 
              names_prefix = "Median Household Income ") |>
  arrange(desc(`Median Household Income 2018`))
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1
# challenge 2 Medium 
ggplot(data = surveys, 
      aes(x = weight, y = species, fill = species)) +
  geom_density_ridges() + 
  labs(x = "weight(Grams)", y = "Species of rodent", title =  "Weight distribution in grams for the various Rodent species ") + 
  theme(legend.position = "none") 

```

-   Example 2

```{r}
#| label: dvs-7-2
#
teacher_evals_clean |> 
    filter(if_any(everything(), is.na)) |> 
    distinct(teacher_id, course_id, percent_failed_cur)
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   `across()`

```{r}
#| label: pe-1-across
# will use this in final 
```

-   `map()` functions

```{r}
#| label: pe-1-map-1
#not in this midterm
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across
#NOT IN MIDTERM 1 / will use this in final 
```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1
#NOT IN MIDTERM 1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2
#NOT IN MIDTERM 1

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
#lab 3 Q7
 
  teacher_evals_clean |>
  group_by(academic_degree, sex) |>
  summarise(
    avg_seniority = mean(seniority),
    min_seniority = min(seniority),
    max_seniority = max(seniority),
    total_instructors = n_distinct(teacher_id)
  )
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4 Q6 modified based on comments will sumbit to revisons soon
ca_childcare |>
  select(mc_infant,
         mc_toddler, 
         mc_preschool,
         region, 
         study_year) |>
 pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "age_group",   
               values_to = "cost")  |>
  mutate(age_group = fct_recode(.f = age_group,
                            "Infant" = "mc_infant",
                            "Toddler" = "mc_toddler",
                            "Preschool" = "mc_preschool"),
  age_group = fct_relevel(age_group, 
                          "Infant", 
                          "Toddler", 
                          "Preschool"), 
  region = fct_relevel(region, "San Francisco Bay Area", "Orange County", "Los Angeles County",
                              "Northern San Joaquin Valley", "Central Coast", "Inland Empire",
                              "Superior California", "Southern San Joaquin Valley", "San Diego-Imperial",
                              "North Coast"))|>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost,
                       color = region))+ 
  geom_point()+ 
  facet_wrap(~age_group) + 
  geom_smooth(method = "loess") +
 scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     limits = c(2008, 2018)) +
  
scale_y_continuous(breaks = seq(100, 500, by = 100), 
                     limits = c(100, 500)) +
  labs(x = "Study Year", y = "", subtitle = "Weekly Median Price for Center-Based Childcare ($)", color = "California Region" ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) + 
  theme(
    text = element_text(size = 12),
    aspect.ratio = 1,
    legend.position = "right",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 15)
  ) + 
  theme_bw()
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1
NOT APPLICABLE FOR THE MIDTERM 
```

-   Example 2

```{r}
#| label: dsm-1-2
NOT APPLICABLE FOR THE MIDTERM 

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
#Lab 4 question 8 
reg_mod1 <- lm(mc_infant ~ mhi_2018, data = ca_childcare)
summary(reg_mod1)
```

-   Example 2

```{r}
#| label: dsm-2-2
species_mod <- aov(weight ~ species, data = surveys)

summary(species_mod)

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->
My thinking has significantly changed over the course of this class. Based on the feedback and comments I have received in the past, I now strive to avoid the same mistakes in future assignments and improve my approach to similar problems. I would say that this style of doing the homework, then revising based on feedback has been pivotal in terms of my ability to understand code and write code. In terms of doing the revisons, I take pride in writing how I have learned from the expereince, and how I have grown as a coder. 

For instance in lab 2 revisions for this code:

ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length )
       ) +
  geom_point(alpha = 0.2) + 
  facet_wrap(~species) + 
  labs(x = "weight (grams) ",
       y = "", 
       color = "",
       subtitle = "hindfoot_length(mm) ",
       title = "Rodents Weight and foot length Scatterplot")
       
and my revisons::

Revisons: Revised the code to include the unit of measurements such as “weight (grams)” , and “hindfoot_length(mm)”

Revison notes: I originally thought it was fine to just have “weight” and ” hindfoot_length” by itself and without the unit of measurement. It’s apparent to me now, that an outsider reading this would not understand the data like me, hence showing the importance of including the unit of measurement in the axis. As a result of this, I will remember to always put the unit of measurements in the axis because not everyone know the data.

This demonstrates my ability to reflect deeply on the importance of humility and how I can learn from this mistake.  I also understand why this change was necessary. For example, I mentioned, "It's evident to me now that an outsider reading this would not interpret the data as I do."



<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->


## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

Throughout this course, I can confidently say that I have significantly expanded my thinking, particularly through the revision process. This allows me to assess my code and identify my mistakes. Whether I seek help from a peer who has a better understanding of the problem or research useful techniques and functions based on feedback, I approach each challenge with the goal not only of correcting my code but also of learning from my errors and discovering new methods for tackling problems. For instance, I was able to address issues in Lab 4 where I had previously struggled, and I modified my code based on the feedback I received. In terms of my progression, I have grown both as a coder and as an individual. This is my first experience using this programming language, and it feels surreal to see how I can apply R code in other statistics classes here at Cal Poly. This has improved my understanding of assignments in my statistics class, allowing me to feel more confident in approaching them. In contrast, when I didn't know R in previous statistics classes, I found it challenging to understand both the assignments and the coding aspects. Lastly, it’s fascinating to see how elements of the challenge problems I attempted have appeared in future problems, such as Lab 4, Question 6, and the color brewer function. Overall, I believe I have been doing a great job with my revisions, which have helped me grow as a coder and expand my skills beyond the classroom. My internship has also provided insight into how concepts like tidiness, efficiency, and various aspects of R apply to the code I encounter, especially with joins. 
## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->
"Your code is very tidy and efficient for the most part, and you achieved and answered most of the questions. Regarding my suggestions for your code, you could make it even more efficient and tidy by adding a new line after your left joins. I saw frequently in your code where, after the left_join, you failed to make a new line. Additionally, on question 7, you added too many spaces in the Select function, which makes the code less tidy. Lastly, Question 2 isn't as efficient as it could be, as too many functions are being called, but it does get the job done. Question 2 could be done much simpler, combining all the functions you made into one operation. Overall, Great job with the code, it was very tidy and efficient for the most part, but by cleaning it up a bit, the code will be amazing!!"

This was a feedback that I was proud of because I was able to point out various points where I though the code tidiness and efficiency could be improved upon. I suggested things like adding new lines after joins, reducing extra spaces, and simplifying functions to improve code efficiency. I am proud of this review because it shows my attention to details and my thinking process of how to improve the code. I am also very proud of this code because I felt like I made an impact on someone's code and helped them make their code cleaner and more efficient. To me all the code reviews feel rewarding because I know I am helping my peers see something they don't see and indirectly making their code better now and in the future. 
<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
I’ve grown a lot as a collaborator through the practice activities in class. First of all, when assigned a new partner, It takes me some time to adjust and understand their style, but once I do, I adapt my approach to work effectively with them. For example, I have had a fellow partner who wouldn't speak up or talk as much, but by understanding their style I was able to understand their preferences and communicate in a way that made them feel comfortable and collaborate effectively. As a result, we were able to work well together and tackle the PA assignments. This experience has helped me grow as a collaborator by teaching me to adapt to different styles and needs. Also on the PA assignments I have grown within the roles assigned to me in the PA assignments, as both a developer and a coder. As a developer, I type what the Coder directs. As the Coder, I guide the Developer, and use the handouts to instruct my peer. I would say that Over time my instructions have became clearer and concise compared to where I was in the beginning. Overall, I have grown to trust the process and Communicate more efficiently over time. 









